{
	"name": "NYC_NBK_0102_getZoneDataURLs",
	"properties": {
		"description": "NYC Taxi Data Demo\nAzure Synapse Analytics Demo\nhttps://github.com/aessing/demo-azuresynapse\n\nDeveloper\nAndre Essing\n(https://www.andre-essing.de/\n(https://github.com/aessing\n(https://twitter.com/aessing\n(https://www.linkedin.com/in/aessing/)\n\nTHIS CODE AND INFORMATION ARE PROVIDED \"AS IS\" WITHOUT WARRANTY OF ANY KIND,\nEITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.",
		"folder": {
			"name": "NYC Taxi/01 Setup"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "DemoSparkPool",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 1,
			"conf": {
				"spark.dynamicAllocation.enabled": "true",
				"spark.dynamicAllocation.minExecutors": "1",
				"spark.dynamicAllocation.maxExecutors": "1",
				"spark.autotune.trackingId": "e8b8baa8-fecb-4b07-8a68-cfa57fc8ec91"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/21194b02-afea-4d59-a0c9-9486eeb9d27f/resourceGroups/rg-aes-dwh-tmp-001/providers/Microsoft.Synapse/workspaces/synw-aes-dwh-tmp-001/bigDataPools/DemoSparkPool",
				"name": "DemoSparkPool",
				"type": "Spark",
				"endpoint": "https://synw-aes-dwh-tmp-001.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/DemoSparkPool",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 3,
				"cores": 16,
				"memory": 112,
				"automaticScaleJobs": true
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"source": [
					"# NYC Taxi Data - Azure Synapse Analytics Demo\n",
					"\n",
					"#### Project URL\n",
					"- <https://github.com/aessing/demo-azuresynapse>\n",
					"\n",
					"#### Developer\n",
					"Andreas Hopfgartner\n",
					"\n",
					"Andre Essing\n",
					"- <https://www.andre-essing.de/>\n",
					"- <https://github.com/aessing>\n",
					"- <https://twitter.com/aessing>\n",
					"- <https://www.linkedin.com/in/aessing/>\n",
					"\n",
					"> THIS CODE AND INFORMATION ARE PROVIDED \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.\n",
					"\n",
					"---"
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"![NYC Taxi & Limousine Commission Logo](https://www1.nyc.gov/assets/tlc/images/content/pages/home/nyc-tlc-logo.png)\n",
					"\n",
					"### Interesting Links\n",
					"- [TLC Trip Record Data](https://www1.nyc.gov/site/tlc/about/tlc-trip-record-data.page)\n",
					"- [NYC Taxi Zones - Data](https://catalog.data.gov/dataset/nyc-taxi-zones)\n",
					"- [NYC Taxi Zones - Map](https://data.cityofnewyork.us/Transportation/NYC-Taxi-Zones/d3c5-ddgc)"
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"# Get list of URLS for subpages with downloads"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Import statements\n",
					"import os\n",
					"import urllib.request, urllib.parse, urllib.error\n",
					"\n",
					"from bs4 import BeautifulSoup\n",
					"from pyspark.sql.functions import split\n",
					"from pyspark.sql.types import StructType, StructField, StringType"
				],
				"execution_count": 1
			},
			{
				"cell_type": "code",
				"source": [
					"# URL of the official NYC Taxi data website\n",
					"website_url = 'https://catalog.data.gov'\n",
					"website_path = '/dataset/nyc-taxi-zones/resource/b8b92f4c-2d89-45b6-aeae-7467322e3e6d'\n",
					"url = website_url + website_path"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Grab the anchor tags from the website\n",
					"\n",
					"1. Open the URL and read the whole page\n",
					"1. Parse the binary HTML string\n",
					"1. Retrieve all of the anchor tags"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"html = urllib.request.urlopen(url).read()\n",
					"soup = BeautifulSoup(html, 'html.parser')\n",
					"anchors = soup.find_all('a', href=True)"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Prepare the anchors"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Get list of all subpages\n",
					"subpages = [website_url + anchor.get('href', None) for anchor in anchors if \"/dataset/nyc-taxi-zones/resource\" in anchor.get('href', None) and \"?inner_span=True\" in anchor.get('href', None)]\n",
					"\n",
					"# Get list of all downloads\n",
					"anchors_download = []\n",
					"for subpage in subpages:\n",
					"    subpage_html = urllib.request.urlopen(subpage).read()\n",
					"    subpage_soup = BeautifulSoup(subpage_html, 'html.parser')\n",
					"    subpage_anchors = subpage_soup.find_all('a', href=True, id=\"res_url\")\n",
					"\n",
					"    for download_URL in subpage_anchors:\n",
					"        if \"data.cityofnewyork.us/api/geospatial\" in download_URL.get('href', None):\n",
					"            anchors_download.append(download_URL.get('href', None))\n",
					"        elif \"data.cityofnewyork.us/api/views/\" in download_URL.get('href', None) and \"accessType=DOWNLOAD\" in download_URL.get('href', None):\n",
					"            anchors_download.append(download_URL.get('href', None))"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Define functions to determine filename and filepath\n",
					"def getFilename(url):\n",
					"    return os.path.basename(url).split('?')[0]\n",
					"\n",
					"def getFilepath(url):\n",
					"    if \"format=KML\" in url:\n",
					"        result = '/raw/taxizone_Maps.kml'\n",
					"    elif \"format=KMZ\" in url:\n",
					"        result = '/raw/taxizone_Maps.kmz'\n",
					"    elif \"format=Shapefile\" in url:\n",
					"        result = '/raw/taxizone_Maps.Shapefile'\n",
					"    elif \"format=Original\" in url:\n",
					"        result = '/raw/taxizone_Maps.original'\n",
					"    elif \"rows.json\" in url:\n",
					"        result = '/raw/taxizone_Maps.json'\n",
					"    elif \"rows.csv\" in url:\n",
					"        result = '/raw/taxizone_Maps.csv'\n",
					"    else:\n",
					"        result = '/raw/misc'\n",
					"    return(result)\n",
					"\n",
					"# Build comma separated list of all downloads\n",
					"anchors_fqdn = []\n",
					"for anchor in anchors_download:\n",
					"    if anchor[0] is '/':\n",
					"        anchors_fqdn.append(website_url + anchor + \",\" + getFilename(website_url + anchor) + \",\" + getFilepath(website_url + anchor))\n",
					"    else:\n",
					"        anchors_fqdn.append(anchor + \",\" + getFilename(anchor) + \",\" + getFilepath(anchor))\n",
					"\n",
					"# One URL not listed on the pages\n",
					"anchors_fqdn.append('https://catalog.data.gov/harvest/object/c03a3d91-4a20-4625-b3b7-839544c490a8,metadata.json,/raw/taxizone_Metadata.json')"
				],
				"execution_count": null
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Put URLs into a dataframe and write it to the datalake"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Building the dataframe\n",
					"urlSchema = StructType([       \n",
					"    StructField('import', StringType(), False)\n",
					"])\n",
					"\n",
					"urlDF = spark.createDataFrame(list(zip(anchors_fqdn)),schema=urlSchema)\n",
					"urlDF = urlDF.withColumn('url', split(urlDF['import'], ',').getItem(0)) \\\n",
					"             .withColumn('filename', split(urlDF['import'], ',').getItem(1)) \\\n",
					"             .withColumn('filepath', split(urlDF['import'], ',').getItem(2)) \\\n",
					"             .drop('import')"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"source": [
					"# Write URLs as file into the data lake\n",
					"urlDF.repartition(1).write.format('parquet').mode('overwrite').save('abfss://nyctaxi@dlsaesdwhtmp002data.dfs.core.windows.net/config/ZoneDataURLs.parquet')"
				],
				"execution_count": null
			}
		]
	}
}