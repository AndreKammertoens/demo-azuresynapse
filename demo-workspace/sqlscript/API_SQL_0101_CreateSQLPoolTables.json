{
	"name": "API_SQL_0101_CreateSQLPoolTables",
	"properties": {
		"description": "API Analytics Demo\nAzure Synapse Analytics Demo\nhttps://github.com/aessing/demo-azuresynapse\n\nDeveloper\nAndre Essing\n(https://www.andre-essing.de/\n(https://github.com/aessing\n(https://twitter.com/aessing\n(https://www.linkedin.com/in/aessing/)\n\nTHIS CODE AND INFORMATION ARE PROVIDED \"AS IS\" WITHOUT WARRANTY OF ANY KIND,\nEITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.",
		"folder": {
			"name": "API Analytics/01 Data Engineer/01 Prepare"
		},
		"content": {
			"query": "-- =============================================================================\n-- API Analytics Demo\n-- Azure Synapse Analytics Demo\n-- https://github.com/aessing/demo-azuresynapse\n-- -----------------------------------------------------------------------------\n-- Developer.......: Andre Essing (https://www.andre-essing.de/)\n--                                (https://github.com/aessing)\n--                                (https://twitter.com/aessing)\n--                                (https://www.linkedin.com/in/aessing/)\n-- -----------------------------------------------------------------------------\n-- THIS CODE AND INFORMATION ARE PROVIDED \"AS IS\" WITHOUT WARRANTY OF ANY KIND,\n-- EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED\n-- WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.\n-- =============================================================================\n\n-- This script will create the tables needed to load the API Analytics data into\n-- the SQL Pool.\n\n-- #############################################################################\n-- DON'T FORGET TO CHOOSE BUILT-IN AND THE CORRECT DATABASE\n-- #############################################################################\n\n-- -----------------------------------------------------------------------------\n-- Create API Analytics schema 'api'\n-- -----------------------------------------------------------------------------\nIF NOT EXISTS (SELECT * FROM sys.schemas WHERE name = 'api')\n    EXEC('CREATE SCHEMA [api]');\nGO\n\n-- -----------------------------------------------------------------------------\n-- Create tables\n-- -----------------------------------------------------------------------------\n-- Create Customers Table\nIF EXISTS (SELECT * FROM sys.objects WHERE NAME = 'Customers' AND TYPE = 'U')\n\tDROP TABLE api.Customers\nGO\nCREATE TABLE api.Customers (\n\t[CustomerId] int NOT NULL,\n\t[CustomerName] nvarchar(128) NOT NULL\n\t)\n\tWITH (\n    DISTRIBUTION = REPLICATE,\n    CLUSTERED INDEX(CustomerId)\n\t)\t\nGO\n\n-- Create Geodata Table\nIF EXISTS (SELECT * FROM sys.objects WHERE NAME = 'Geodata' AND TYPE = 'U')\n\tDROP TABLE api.Geodata \nGO\nCREATE TABLE api.Geodata (\n\t[GeoId] int,\n\t[LongitudeMilliDegree] int NOT NULL,\n\t[LatitudeMilliDegree] int NOT NULL,\n\t[LongitudeDegree] real NOT NULL,\n\t[LatitudeDegree] real NOT NULL\n\t)\n\tWITH (\n    DISTRIBUTION = REPLICATE,\n    CLUSTERED INDEX(GeoID)\n\t)\nGO\n\n-- Create Operations Table\nIF EXISTS (SELECT * FROM sys.objects WHERE NAME = 'Operations' AND TYPE = 'U')\n\tDROP TABLE api.Operations \nGO\nCREATE TABLE api.Operations (\n\t[OperationId] int NOT NULL,\n\t[OperationName] nvarchar(128) NOT NULL,\n\t[OperationNameWoSlash] nvarchar(128) NOT NULL,\n\t[OperationNameWSlash] nvarchar(128) NOT NULL\n\t)\n\tWITH (\n    DISTRIBUTION = REPLICATE,\n    CLUSTERED INDEX(OperationID)\n\t)\nGO\n\n-- Create Services Table\nIF EXISTS (SELECT * FROM sys.objects WHERE NAME = 'Services' AND TYPE = 'U')\n\tDROP TABLE api.Services \nGO\nCREATE TABLE api.Services (\n\t[ServiceId] int NOT NULL,\n\t[ServiceName] nvarchar(128) NOT NULL\n\t)\n\tWITH (\n    DISTRIBUTION = REPLICATE,\n    CLUSTERED INDEX(ServiceID)\n\t)\nGO\n\n-- Create UsageKind Table\nIF EXISTS (SELECT * FROM sys.objects WHERE NAME = 'UsageKind' AND TYPE = 'U')\n\tDROP TABLE api.UsageKind \nGO\nCREATE TABLE api.UsageKind (\n\t[UsageKindId] int NOT NULL,\n\t[UsageKindName] nvarchar(128) NOT NULL\n\t)\n\tWITH (\n    DISTRIBUTION = REPLICATE,\n    CLUSTERED INDEX(UsageKindID)\n\t)\nGO\nINSERT INTO api.UsageKind (UsageKindId, UsageKindName) VALUES (0, 'success')\nINSERT INTO api.UsageKind (UsageKindId, UsageKindName) VALUES (1, 'input validation')\nINSERT INTO api.UsageKind (UsageKindId, UsageKindName) VALUES (2, 'error')\nGO\n\n-- Create Timeseriess Table\nIF EXISTS (SELECT * FROM sys.objects WHERE NAME = 'Timeseries' AND TYPE = 'U')\n\tDROP TABLE api.Timeseries \nGO\nCREATE TABLE api.Timeseries (\n\t[Id] int NOT NULL,\n\t[TimestampUtc] datetime2(7) NOT NULL,\n\t[UsageKind] int NOT NULL,\n\t[OperationId] int NOT NULL,\n\t[ServiceId] int NOT NULL,\n\t[GeoId] int NOT NULL,\n\t[CallDurationMillis] int NOT NULL,\n\t[CustomerId] int NOT NULL,\n\t[UsageKindDesc] nvarchar(128) NOT NULL,\n\t[Year] int NOT NULL,\n\t[Month] int NOT NULL,\n\t[YearMonth] int NOT NULL,\n\t[WeekOfYear] int NOT NULL,\n\t[DayOfYear] int NOT NULL,\n\t[DayOfMonth] int NOT NULL,\n\t[DayOfWeek] int NOT NULL\n\t)\n\tWITH\n    (\n    DISTRIBUTION = HASH([YearMonth]),\n\tCLUSTERED INDEX(Id)\n    )\nGO",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "DemoPool01",
				"poolName": "DemoPool01"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}