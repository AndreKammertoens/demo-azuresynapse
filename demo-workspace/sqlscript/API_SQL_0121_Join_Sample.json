{
	"name": "API_SQL_0121_Join_Sample",
	"properties": {
		"description": "API Analytics Demo\nAzure Synapse Analytics Demo\nhttps://github.com/aessing/demo-azuresynapse\n\nDeveloper\nAndre Essing\n(https://www.andre-essing.de/\n(https://github.com/aessing\n(https://twitter.com/aessing\n(https://www.linkedin.com/in/aessing/)\n\nTHIS CODE AND INFORMATION ARE PROVIDED \"AS IS\" WITHOUT WARRANTY OF ANY KIND,\nEITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.",
		"folder": {
			"name": "API Analytics/01 Data Engineer/02 Analysis"
		},
		"content": {
			"query": "-- =============================================================================\n-- API Analytics Demo\n-- Azure Synapse Analytics Demo\n-- https://github.com/aessing/demo-azuresynapse\n-- -----------------------------------------------------------------------------\n-- Developer.......: Andre Essing (https://www.andre-essing.de/)\n--                                (https://github.com/aessing)\n--                                (https://twitter.com/aessing)\n--                                (https://www.linkedin.com/in/aessing/)\n-- -----------------------------------------------------------------------------\n-- THIS CODE AND INFORMATION ARE PROVIDED \"AS IS\" WITHOUT WARRANTY OF ANY KIND,\n-- EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED\n-- WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.\n-- =============================================================================\n\n-- This script should help to compare SQL Pool and Serverless DB and show that\n-- the statements could be same on both engines.\n-- So, even if there are some differences in the engines, it is most times not\n-- a question about features, it is more a question about what do you want to\n-- achieve and what is the purpose of your use case. That helps with the\n-- decission which engine is the best for your use case.\n\n-- #############################################################################\n-- DON'T FORGET TO CHOOSE THE CORRECT ENGINE AND DATABASE\n-- #############################################################################\n\n-- -----------------------------------------------------------------------------\n-- You can run a SQL statement directly against the SQL Pool and than against\n-- the Serverless DB without changing anything in the statement\n-- -----------------------------------------------------------------------------\n-- Run first in SQL Pool, than on serverless engine\nSELECT TOP (100)\n [Id]\n,[TimestampUtc]\n,[OperationNameWSlash] AS Operation\n,[ServiceName] AS Service\n,[CallDurationMillis] AS CallDurationInMs\n,[CallDurationMillis] / 1000.0 AS CallDurationInSec\n,CASE\n    WHEN [CallDurationMillis] <= 1000 THEN 'OK'\n    WHEN [CallDurationMillis] > 1000 THEN 'Slow'\n    ELSE 'Error'\nEND AS CallDurationStatus\n,[UsageKindDesc] AS UsageKind\n,[CustomerName] AS Customer\n,[LongitudeDegree] AS Longitude\n,[LatitudeDegree] AS Latitude\n,[Year]\n,[Month]\n,[DayOfMonth] AS Day\n,[WeekOfYear] AS CalendarWeek\n FROM [api].[Timeseries] ts \n JOIN [api].[Customers] cu\n    ON [ts].[CustomerID] = [cu].[CustomerID]\n JOIN [api].[GeoData] gd\n    ON [ts].[GeoID] = [gd].[GeoID]\n JOIN [api].[Operations] op\n    ON [ts].[OperationID] = [op].[OperationID]\n JOIN [api].[Services] sv\n    ON [ts].[ServiceID] = [sv].[ServiceID]\n\n-- -----------------------------------------------------------------------------\n-- Of course, you can still run the SQL statement directly on the curated\n-- parquet files in the datalake \n-- -----------------------------------------------------------------------------\n-- Run on serverless engine\nSELECT TOP (100)\n [Id]\n,[TimestampUtc]\n,[OperationNameWSlash] AS Operation\n,[ServiceName] AS Service\n,[CallDurationMillis] AS CallDurationInMs\n,[CallDurationMillis] / 1000.0 AS CallDurationInSec\n,CASE\n    WHEN [CallDurationMillis] <= 1000 THEN 'OK'\n    WHEN [CallDurationMillis] > 1000 THEN 'Slow'\n    ELSE 'Error'\nEND AS CallDurationStatus\n,[UsageKindDesc] AS UsageKind\n,[CustomerName] AS Customer\n,[LongitudeDegree] AS Longitude\n,[LatitudeDegree] AS Latitude\n,[Year]\n,[Month]\n,[DayOfMonth] AS Day\n,[WeekOfYear] AS CalendarWeek\n FROM OPENROWSET(BULK 'https://dlsaesdwhtmp002data.dfs.core.windows.net/apianalytics/curated/timeseries.parquet/**', FORMAT = 'PARQUET' ) ts \n JOIN OPENROWSET(BULK 'https://dlsaesdwhtmp002data.dfs.core.windows.net/apianalytics/curated/customers.parquet/**', FORMAT = 'PARQUET' ) cu\n    ON [ts].[CustomerID] = [cu].[CustomerID]\n JOIN OPENROWSET(BULK 'https://dlsaesdwhtmp002data.dfs.core.windows.net/apianalytics/curated/geodata.parquet/**', FORMAT = 'PARQUET' ) gd\n    ON [ts].[GeoID] = [gd].[GeoID]\n JOIN OPENROWSET(BULK 'https://dlsaesdwhtmp002data.dfs.core.windows.net/apianalytics/curated/operations.parquet/**', FORMAT = 'PARQUET' ) op\n    ON [ts].[OperationID] = [op].[OperationID]\n JOIN OPENROWSET(BULK 'https://dlsaesdwhtmp002data.dfs.core.windows.net/apianalytics/curated/services.parquet/**', FORMAT = 'PARQUET' ) sv\n    ON [ts].[ServiceID] = [sv].[ServiceID]",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "DemoServerlessDB",
				"poolName": "Built-in"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}