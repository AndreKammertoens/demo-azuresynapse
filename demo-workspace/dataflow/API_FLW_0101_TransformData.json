{
	"name": "API_FLW_0101_TransformData",
	"properties": {
		"description": "API Analytics Demo\nAzure Synapse Analytics Demo\nhttps://github.com/aessing/demo-azuresynapse\n\nDeveloper\nAndre Essing\n(https://www.andre-essing.de/\n(https://github.com/aessing\n(https://twitter.com/aessing\n(https://www.linkedin.com/in/aessing/)\n\nTHIS CODE AND INFORMATION ARE PROVIDED \"AS IS\" WITHOUT WARRANTY OF ANY KIND,\nEITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A PARTICULAR PURPOSE.",
		"folder": {
			"name": "API Analytics/01 Data Engineer"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "demosynapsesws01-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "sourceCustomers"
				},
				{
					"linkedService": {
						"referenceName": "demosynapsesws01-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "sourceGeodata"
				},
				{
					"linkedService": {
						"referenceName": "demosynapsesws01-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "sourceOperations"
				},
				{
					"linkedService": {
						"referenceName": "demosynapsesws01-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "sourceServices"
				},
				{
					"linkedService": {
						"referenceName": "demosynapsesws01-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "sourceTimeseries"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "demosynapsesws01-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "sinkCustomers2Lake"
				},
				{
					"linkedService": {
						"referenceName": "demosynapsesws01-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "sinkGeodata2Lake"
				},
				{
					"linkedService": {
						"referenceName": "demosynapsesws01-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "sinkOperations2Lake"
				},
				{
					"linkedService": {
						"referenceName": "demosynapsesws01-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "sinkLakeServices"
				},
				{
					"linkedService": {
						"referenceName": "demosynapsesws01-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "sinkTimeseries2Lake"
				},
				{
					"dataset": {
						"referenceName": "API_IDS_SQLPool_Customers",
						"type": "DatasetReference"
					},
					"name": "sinkCustomers2SQL"
				},
				{
					"dataset": {
						"referenceName": "API_IDS_SQLPool_Services",
						"type": "DatasetReference"
					},
					"name": "sinkServices2SQL"
				},
				{
					"dataset": {
						"referenceName": "API_IDS_SQLPool_Timeseries",
						"type": "DatasetReference"
					},
					"name": "sinkTimeseries2SQL"
				},
				{
					"dataset": {
						"referenceName": "API_IDS_SQLPool_Operations",
						"type": "DatasetReference"
					},
					"name": "sinkOperations2SQL"
				},
				{
					"dataset": {
						"referenceName": "API_IDS_SQLPool_Geodata",
						"type": "DatasetReference"
					},
					"name": "sinkGeodata2SQL"
				}
			],
			"transformations": [
				{
					"name": "ConvertMilliDegree"
				},
				{
					"name": "AddDataColumns"
				},
				{
					"name": "AddRemoveSlash"
				},
				{
					"name": "ConvertTimestamp"
				}
			],
			"script": "source(output(\n\t\tCustomerId as integer,\n\t\tCustomerName as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delimited',\n\tfileSystem: 'apianalytics',\n\tfolderPath: 'raw',\n\tfileName: 'Customers.csv',\n\tcolumnDelimiter: ';',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> sourceCustomers\nsource(output(\n\t\tGeoID as integer,\n\t\tLongitudeMilliDegree as integer,\n\t\tLatitudeMilliDegree as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delimited',\n\tfileSystem: 'apianalytics',\n\tfolderPath: 'raw',\n\tfileName: 'Geodata.csv',\n\tcolumnDelimiter: ';',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> sourceGeodata\nsource(output(\n\t\tOperationID as integer,\n\t\tOperationName as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delimited',\n\tfileSystem: 'apianalytics',\n\tfolderPath: 'raw',\n\tfileName: 'Operations.csv',\n\tcolumnDelimiter: ';',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> sourceOperations\nsource(output(\n\t\tServiceID as integer,\n\t\tServiceName as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delimited',\n\tfileSystem: 'apianalytics',\n\tfolderPath: 'raw',\n\tfileName: 'Services.csv',\n\tcolumnDelimiter: ';',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> sourceServices\nsource(output(\n\t\tId as integer,\n\t\tTimestampUtc as string,\n\t\tUsageKind as integer,\n\t\tOperationID as integer,\n\t\tServiceID as integer,\n\t\tGeoID as integer,\n\t\tCallDurationMillis as integer,\n\t\tCustomerID as integer\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tformat: 'delimited',\n\tfileSystem: 'apianalytics',\n\tfolderPath: 'raw',\n\tfileName: 'Timeseries.csv',\n\tcolumnDelimiter: ';',\n\tescapeChar: '\\\\',\n\tquoteChar: '\\\"',\n\tcolumnNamesAsHeader: true) ~> sourceTimeseries\nsourceGeodata derive(LongitudeDegree = toFloat(LongitudeMilliDegree / 1000),\n\t\tLatitudeDegree = toFloat(LatitudeMilliDegree / 1000)) ~> ConvertMilliDegree\nConvertTimestamp derive(UsageKindDesc = case(\r\n    UsageKind == 0, 'success',\r\n    UsageKind == 1, 'input validation',\r\n    UsageKind == 2, 'error',\r\n    true(), 'not defined'\r\n),\n\t\tYear = year(TimestampUtc),\n\t\tMonth = month(TimestampUtc),\n\t\tYearMonth = toInteger(\r\n    concat(\r\n        toString(\r\n            year(TimestampUtc)),\r\n            lpad(toString(month(TimestampUtc)), 2, '0')\r\n    )\r\n),\n\t\tWeekOfYear = weekOfYear(TimestampUtc),\n\t\tDayOfYear = dayOfYear(TimestampUtc),\n\t\tDayOfMonth = dayOfMonth(TimestampUtc),\n\t\tDayOfWeek = dayOfWeek(TimestampUtc)) ~> AddDataColumns\nsourceOperations derive(OperationNameWoSlash = ltrim(OperationName, '/'),\n\t\tOperationNameWSlash = case(startsWith(OperationName, '/'), OperationName, concat('/', OperationName))) ~> AddRemoveSlash\nsourceTimeseries derive(TimestampUtc = iif(length(TimestampUtc) == 19,\r\n        toTimestamp(\r\n        TimestampUtc,\r\n        'yyyy-MM-dd HH:mm:ss', \r\n        'UTC'\r\n    ),\r\n    toTimestamp(\r\n        substring(TimestampUtc, 1, 23),\r\n        'yyyy-MM-dd HH:mm:ss.SSS', \r\n        'UTC'\r\n    )\r\n)) ~> ConvertTimestamp\nsourceCustomers sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tfileSystem: 'apianalytics',\n\tfolderPath: 'curated/customers.parquet',\n\ttruncate: true,\n\tcompressionCodec: 'snappy',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tCustomerId,\n\t\tCustomerName\n\t)) ~> sinkCustomers2Lake\nConvertMilliDegree sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tfileSystem: 'apianalytics',\n\tfolderPath: 'curated/geodata.parquet',\n\ttruncate: true,\n\tcompressionCodec: 'snappy',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tGeoID,\n\t\tLongitudeMilliDegree,\n\t\tLatitudeMilliDegree,\n\t\tLongitudeDegree,\n\t\tLatitudeDegree\n\t)) ~> sinkGeodata2Lake\nAddRemoveSlash sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tfileSystem: 'apianalytics',\n\tfolderPath: 'curated/operations.parquet',\n\ttruncate: true,\n\tcompressionCodec: 'snappy',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tOperationID,\n\t\tOperationName,\n\t\tOperationNameWoSlash,\n\t\tOperationNameWSlash\n\t)) ~> sinkOperations2Lake\nsourceServices sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tfileSystem: 'apianalytics',\n\tfolderPath: 'curated/services.parquet',\n\ttruncate: true,\n\tcompressionCodec: 'snappy',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\tmapColumn(\n\t\tServiceID,\n\t\tServiceName\n\t)) ~> sinkLakeServices\nAddDataColumns sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tformat: 'parquet',\n\tfileSystem: 'apianalytics',\n\tfolderPath: 'curated/timeseries.parquet',\n\ttruncate: true,\n\tcompressionCodec: 'snappy',\n\tumask: 0022,\n\tpreCommands: [],\n\tpostCommands: [],\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sinkTimeseries2Lake\nsourceCustomers sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tCustomerId as integer,\n\t\tCustomerName as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tCustomerId,\n\t\tCustomerName\n\t)) ~> sinkCustomers2SQL\nsourceServices sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tServiceId as integer,\n\t\tServiceName as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tServiceId = ServiceID,\n\t\tServiceName\n\t)) ~> sinkServices2SQL\nAddDataColumns sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tId as integer,\n\t\tTimestampUtc as timestamp,\n\t\tUsageKind as integer,\n\t\tOperationId as integer,\n\t\tServiceId as integer,\n\t\tGeoId as integer,\n\t\tCallDurationMillis as long,\n\t\tCustomerId as integer,\n\t\tUsageKindDesc as string,\n\t\tYear as integer,\n\t\tMonth as integer,\n\t\tYearMonth as integer,\n\t\tWeekOfYear as integer,\n\t\tDayOfYear as integer,\n\t\tDayOfMonth as integer,\n\t\tDayOfWeek as integer\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tId,\n\t\tTimestampUtc,\n\t\tUsageKind,\n\t\tOperationId = OperationID,\n\t\tServiceId = ServiceID,\n\t\tGeoId = GeoID,\n\t\tCallDurationMillis,\n\t\tCustomerId = CustomerID,\n\t\tUsageKindDesc,\n\t\tYear,\n\t\tMonth,\n\t\tYearMonth,\n\t\tWeekOfYear,\n\t\tDayOfYear,\n\t\tDayOfMonth,\n\t\tDayOfWeek\n\t)) ~> sinkTimeseries2SQL\nAddRemoveSlash sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tOperationId as integer,\n\t\tOperationName as string,\n\t\tOperationNameWoSlash as string,\n\t\tOperationNameWSlash as string\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tOperationId = OperationID,\n\t\tOperationName,\n\t\tOperationNameWoSlash,\n\t\tOperationNameWSlash\n\t)) ~> sinkOperations2SQL\nConvertMilliDegree sink(allowSchemaDrift: false,\n\tvalidateSchema: false,\n\tinput(\n\t\tGeoId as integer,\n\t\tLongitudeMilliDegree as integer,\n\t\tLatitudeMilliDegree as integer,\n\t\tLongitudeDegree as float,\n\t\tLatitudeDegree as float\n\t),\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:false,\n\ttruncate:true,\n\tformat: 'table',\n\tstaged: true,\n\tallowCopyCommand: true,\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError',\n\tmapColumn(\n\t\tGeoId = GeoID,\n\t\tLongitudeMilliDegree,\n\t\tLatitudeMilliDegree,\n\t\tLongitudeDegree,\n\t\tLatitudeDegree\n\t)) ~> sinkGeodata2SQL"
		}
	}
}